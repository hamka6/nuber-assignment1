"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventStreamPayloadHandler = void 0;
const eventstream_marshaller_1 = require("@aws-sdk/eventstream-marshaller");
const stream_1 = require("stream");
const EventSigningStream_1 = require("./EventSigningStream");
/**
 * A handler that control the eventstream payload flow:
 * 1. Pause stream for initial attempt.
 * 2. Close the stream is attempt fails.
 * 3. Start piping payload when connection is established.
 * 4. Sign the payload after payload stream starting to flow.
 */
class EventStreamPayloadHandler {
    constructor(options) {
        this.eventSigner = options.eventSigner;
        this.eventMarshaller = new eventstream_marshaller_1.EventStreamMarshaller(options.utf8Encoder, options.utf8Decoder);
    }
    async handle(next, args, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    context = {}) {
        const request = args.request;
        const { body: payload } = request;
        if (!(payload instanceof stream_1.Readable)) {
            throw new Error("Eventstream payload must be a Readable stream.");
        }
        const payloadStream = payload;
        request.body = new stream_1.PassThrough({
            objectMode: true,
        });
        let result;
        try {
            result = await next(args);
        }
        catch (e) {
            // Close the payload stream otherwise the retry would hang
            // because of the previous connection.
            request.body.end();
            throw e;
        }
        // If response is successful, start piping the payload stream
        const match = (request.headers["authorization"] || "").match(/Signature=([\w]+)$/);
        // Sign the eventstream based on the signature from initial request.
        const priorSignature = (match || [])[1];
        const signingStream = new EventSigningStream_1.EventSigningStream({
            priorSignature,
            eventMarshaller: this.eventMarshaller,
            eventSigner: await this.eventSigner(),
        });
        (0, stream_1.pipeline)(payloadStream, signingStream, request.body, (err) => {
            if (err) {
                throw err;
            }
        });
        return result;
    }
}
exports.EventStreamPayloadHandler = EventStreamPayloadHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdHJlYW1QYXlsb2FkSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FdmVudFN0cmVhbVBheWxvYWRIYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDRFQUEyRjtBQWMzRixtQ0FBeUQ7QUFFekQsNkRBQTBEO0FBUTFEOzs7Ozs7R0FNRztBQUNILE1BQWEseUJBQXlCO0lBR3BDLFlBQVksT0FBeUM7UUFDbkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSw4Q0FBZSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUNWLElBQTZCLEVBQzdCLElBQW1DO0lBQ25DLDZEQUE2RDtJQUM3RCxVQUFtQyxFQUFTO1FBRTVDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFzQixDQUFDO1FBQzVDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxDQUFDLE9BQU8sWUFBWSxpQkFBUSxDQUFDLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO1NBQ25FO1FBQ0QsTUFBTSxhQUFhLEdBQUcsT0FBbUIsQ0FBQztRQUMxQyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksb0JBQVcsQ0FBQztZQUM3QixVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFDSCxJQUFJLE1BQWtDLENBQUM7UUFDdkMsSUFBSTtZQUNGLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsMERBQTBEO1lBQzFELHNDQUFzQztZQUN0QyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ25CLE1BQU0sQ0FBQyxDQUFDO1NBQ1Q7UUFDRCw2REFBNkQ7UUFDN0QsTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ25GLG9FQUFvRTtRQUNwRSxNQUFNLGNBQWMsR0FBRyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxNQUFNLGFBQWEsR0FBRyxJQUFJLHVDQUFrQixDQUFDO1lBQzNDLGNBQWM7WUFDZCxlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWU7WUFDckMsV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRTtTQUN0QyxDQUFDLENBQUM7UUFDSCxJQUFBLGlCQUFRLEVBQUMsYUFBYSxFQUFFLGFBQWEsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDM0QsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsTUFBTSxHQUFHLENBQUM7YUFDWDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUNGO0FBaERELDhEQWdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50U3RyZWFtTWFyc2hhbGxlciBhcyBFdmVudE1hcnNoYWxsZXIgfSBmcm9tIFwiQGF3cy1zZGsvZXZlbnRzdHJlYW0tbWFyc2hhbGxlclwiO1xuaW1wb3J0IHtcbiAgRGVjb2RlcixcbiAgRW5jb2RlcixcbiAgRXZlbnRTaWduZXIsXG4gIEV2ZW50U3RyZWFtUGF5bG9hZEhhbmRsZXIgYXMgSUV2ZW50U3RyZWFtUGF5bG9hZEhhbmRsZXIsXG4gIEZpbmFsaXplSGFuZGxlcixcbiAgRmluYWxpemVIYW5kbGVyQXJndW1lbnRzLFxuICBGaW5hbGl6ZUhhbmRsZXJPdXRwdXQsXG4gIEhhbmRsZXJFeGVjdXRpb25Db250ZXh0LFxuICBIdHRwUmVxdWVzdCxcbiAgTWV0YWRhdGFCZWFyZXIsXG4gIFByb3ZpZGVyLFxufSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IFBhc3NUaHJvdWdoLCBwaXBlbGluZSwgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbmltcG9ydCB7IEV2ZW50U2lnbmluZ1N0cmVhbSB9IGZyb20gXCIuL0V2ZW50U2lnbmluZ1N0cmVhbVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50U3RyZWFtUGF5bG9hZEhhbmRsZXJPcHRpb25zIHtcbiAgZXZlbnRTaWduZXI6IFByb3ZpZGVyPEV2ZW50U2lnbmVyPjtcbiAgdXRmOEVuY29kZXI6IEVuY29kZXI7XG4gIHV0ZjhEZWNvZGVyOiBEZWNvZGVyO1xufVxuXG4vKipcbiAqIEEgaGFuZGxlciB0aGF0IGNvbnRyb2wgdGhlIGV2ZW50c3RyZWFtIHBheWxvYWQgZmxvdzpcbiAqIDEuIFBhdXNlIHN0cmVhbSBmb3IgaW5pdGlhbCBhdHRlbXB0LlxuICogMi4gQ2xvc2UgdGhlIHN0cmVhbSBpcyBhdHRlbXB0IGZhaWxzLlxuICogMy4gU3RhcnQgcGlwaW5nIHBheWxvYWQgd2hlbiBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkLlxuICogNC4gU2lnbiB0aGUgcGF5bG9hZCBhZnRlciBwYXlsb2FkIHN0cmVhbSBzdGFydGluZyB0byBmbG93LlxuICovXG5leHBvcnQgY2xhc3MgRXZlbnRTdHJlYW1QYXlsb2FkSGFuZGxlciBpbXBsZW1lbnRzIElFdmVudFN0cmVhbVBheWxvYWRIYW5kbGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudFNpZ25lcjogUHJvdmlkZXI8RXZlbnRTaWduZXI+O1xuICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50TWFyc2hhbGxlcjogRXZlbnRNYXJzaGFsbGVyO1xuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBFdmVudFN0cmVhbVBheWxvYWRIYW5kbGVyT3B0aW9ucykge1xuICAgIHRoaXMuZXZlbnRTaWduZXIgPSBvcHRpb25zLmV2ZW50U2lnbmVyO1xuICAgIHRoaXMuZXZlbnRNYXJzaGFsbGVyID0gbmV3IEV2ZW50TWFyc2hhbGxlcihvcHRpb25zLnV0ZjhFbmNvZGVyLCBvcHRpb25zLnV0ZjhEZWNvZGVyKTtcbiAgfVxuXG4gIGFzeW5jIGhhbmRsZTxUIGV4dGVuZHMgTWV0YWRhdGFCZWFyZXI+KFxuICAgIG5leHQ6IEZpbmFsaXplSGFuZGxlcjxhbnksIFQ+LFxuICAgIGFyZ3M6IEZpbmFsaXplSGFuZGxlckFyZ3VtZW50czxhbnk+LFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBjb250ZXh0OiBIYW5kbGVyRXhlY3V0aW9uQ29udGV4dCA9IHt9IGFzIGFueVxuICApOiBQcm9taXNlPEZpbmFsaXplSGFuZGxlck91dHB1dDxUPj4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBhcmdzLnJlcXVlc3QgYXMgSHR0cFJlcXVlc3Q7XG4gICAgY29uc3QgeyBib2R5OiBwYXlsb2FkIH0gPSByZXF1ZXN0O1xuICAgIGlmICghKHBheWxvYWQgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZW50c3RyZWFtIHBheWxvYWQgbXVzdCBiZSBhIFJlYWRhYmxlIHN0cmVhbS5cIik7XG4gICAgfVxuICAgIGNvbnN0IHBheWxvYWRTdHJlYW0gPSBwYXlsb2FkIGFzIFJlYWRhYmxlO1xuICAgIHJlcXVlc3QuYm9keSA9IG5ldyBQYXNzVGhyb3VnaCh7XG4gICAgICBvYmplY3RNb2RlOiB0cnVlLFxuICAgIH0pO1xuICAgIGxldCByZXN1bHQ6IEZpbmFsaXplSGFuZGxlck91dHB1dDxhbnk+O1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBuZXh0KGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIENsb3NlIHRoZSBwYXlsb2FkIHN0cmVhbSBvdGhlcndpc2UgdGhlIHJldHJ5IHdvdWxkIGhhbmdcbiAgICAgIC8vIGJlY2F1c2Ugb2YgdGhlIHByZXZpb3VzIGNvbm5lY3Rpb24uXG4gICAgICByZXF1ZXN0LmJvZHkuZW5kKCk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICAvLyBJZiByZXNwb25zZSBpcyBzdWNjZXNzZnVsLCBzdGFydCBwaXBpbmcgdGhlIHBheWxvYWQgc3RyZWFtXG4gICAgY29uc3QgbWF0Y2ggPSAocmVxdWVzdC5oZWFkZXJzW1wiYXV0aG9yaXphdGlvblwiXSB8fCBcIlwiKS5tYXRjaCgvU2lnbmF0dXJlPShbXFx3XSspJC8pO1xuICAgIC8vIFNpZ24gdGhlIGV2ZW50c3RyZWFtIGJhc2VkIG9uIHRoZSBzaWduYXR1cmUgZnJvbSBpbml0aWFsIHJlcXVlc3QuXG4gICAgY29uc3QgcHJpb3JTaWduYXR1cmUgPSAobWF0Y2ggfHwgW10pWzFdO1xuICAgIGNvbnN0IHNpZ25pbmdTdHJlYW0gPSBuZXcgRXZlbnRTaWduaW5nU3RyZWFtKHtcbiAgICAgIHByaW9yU2lnbmF0dXJlLFxuICAgICAgZXZlbnRNYXJzaGFsbGVyOiB0aGlzLmV2ZW50TWFyc2hhbGxlcixcbiAgICAgIGV2ZW50U2lnbmVyOiBhd2FpdCB0aGlzLmV2ZW50U2lnbmVyKCksXG4gICAgfSk7XG4gICAgcGlwZWxpbmUocGF5bG9hZFN0cmVhbSwgc2lnbmluZ1N0cmVhbSwgcmVxdWVzdC5ib2R5LCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=